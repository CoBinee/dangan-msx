; Level.s : レベル
;


; モジュール宣言
;
    .module Level

; 参照ファイル
;
    .include    "bios.inc"
    .include    "vdp.inc"
    .include    "System.inc"
    .include    "Sound.inc"
    .include    "App.inc"
    .include    "Game.inc"
    .include    "Stage.inc"
    .include    "Character.inc"
    .include    "Player.inc"
    .include    "Enemy.inc"
    .include	"Level.inc"

; 外部変数宣言
;

; マクロの定義
;


; CODE 領域
;
    .area   _CODE

; レベルを初期化する
;
_LevelInitialize::
    
    ; レジスタの保存
    
    ; ステージの初期化
    ld      hl, #levelDefault
    ld      de, #_level
    ld      bc, #LEVEL_LENGTH
    ldir

    ; レジスタの復帰
    
    ; 終了
    ret

; レベルを更新する
;
_LevelUpdate::

    ; レジスタの保存

    ; エネミーの監視
    call    _EnemyIsLive
    jr      c, 90$

    ; アニメーションの更新
    ld      hl, #(_level + LEVEL_ANIMATION_FRAME)
    inc     (hl)

    ; レベルの判定
    ld      a, (_level + LEVEL_FLAG)
    bit     #LEVEL_FLAG_CLEAR_BIT, a
    jr      nz, 90$
    ld      hl, (_level + LEVEL_CHECK_L)
    ld      a, h
    or      l
    jr      z, 90$
    ld      de, #10$
    push    de
    jp      (hl)
;   pop     de
10$:

    ; 更新の完了
90$:

    ; レジスタの復帰

    ; 終了
    ret

; レベルを描画する
;
_LevelRender::

    ; レジスタの保存

    ; エネミーの監視
    call    _EnemyIsLive
    jr      c, 90$

    ; スプライトの描画
    ld      hl, (_level + LEVEL_ANIMATION_L)
    ld      a, h
    or      l
    jr      z, 90$
    ld      a, (_level + LEVEL_ANIMATION_FRAME)
    and     #0x0c
    ld      e, a
    ld      d, #0x00
    add     hl, de
    ld      de, #(_sprite + GAME_SPRITE_LEVEL)
    ld      bc, #0x0004
    ldir

    ; 描画の完了
90$:

    ; レジスタの復帰

    ; 終了
    ret

; レベルを作成する
;
_LevelBuild::

    ; レジスタの保存

    ; フラグのクリア
    ld      a, (_level + LEVEL_FLAG)
    res     #LEVEL_FLAG_CLEAR_BIT, a
    ld      (_level + LEVEL_FLAG), a

    ; アニメーションのクリア
    xor     a
    ld      (_level + LEVEL_ANIMATION_FRAME), a
    ld      (_level + LEVEL_ANIMATION_COUNT), a

    ; レベルの作成
    ld      hl, (_level + LEVEL_BUILD_L)
    jp      (hl)

;   ; レジスタの復帰

;   ; 終了
;   ret

; レベルをクリアしたかどうかを判定する
;
_LevelIsClear::

    ; レジスタの保存

    ; cf > 1 = クリアした

    ; フラグの監視
    ld      a, (_level + LEVEL_FLAG)
    or      a
    bit     #LEVEL_FLAG_CLEAR_BIT, a
    jr      z, 10$
    scf
10$:

    ; レジスタの復帰

    ; 終了
    ret

; レベルがあるかどうかを判定する
;
_LevelIsExist::

    ; レジスタの保存
    push    hl

    ; cf > 1 = レベルがある

    ; レベルの監視
    ld      hl, (_level + LEVEL_BUILD_L)
    ld      a, h
    or      l
    jr      z, 10$
    scf
10$:

    ; レジスタの復帰
    pop     hl

    ; 終了
    ret

; 何もしない
;
LevelNull:

    ; レジスタの保存

    ; レジスタの復帰

    ; 終了
    ret

; レベル 1 を作成する
;
Level1_Build:

    ; レジスタの保存

    ; ステージの作成
    ld      hl, #level1_Stage
    call    _StageBuild

    ; エネミーの作成
    ld      ix, #(_enemy + 0 * ENEMY_LENGTH)
    ld      de, #0x5790
    ld      bc, #((0x00 << 8) | 0x00)
    call    _EnemyFortSpawn
    ld      ix, #(_enemy + 1 * ENEMY_LENGTH)
    ld      de, #0x37e8
    ld      bc, #((0x00 << 8) | 0x00)
    call    _EnemyFortSpawn
    
    ; プレイヤの作成
    ld      de, #0x0008
    ld      c, #0x01
    call    _PlayerSpawn

    ; アニメーションの設定
    ld      hl, #level1_Animation
    ld      (_level + LEVEL_ANIMATION_L), hl

    ; レジスタの復帰

    ; 終了
    ret

; レベル 1 を判定する
;
Level1_Check:

    ; レジスタの保存

    ; レベルの判定
    call    _PlayerIsLand
    jr      nc, 19$
;   call    _PlayerGetPosition
;   ld      a, e
    ld      a, (_player + CHARACTER_POSITION_X_H)
    cp      #0xf8
    jr      c, 19$

    ; フラグの更新
    ld      hl, #(_level + LEVEL_FLAG)
    set     #LEVEL_FLAG_CLEAR_BIT, (hl)
    set     #LEVEL_FLAG_CONTINUE_BIT, (hl)

    ; 次のレベルの設定
    ld      hl, #Level2_Build
    ld      (_level + LEVEL_BUILD_L), hl
    ld      hl, #Level2_Check
    ld      (_level + LEVEL_CHECK_L), hl
19$:

    ; レジスタの復帰

    ; 終了
    ret

; レベル 1 ステージ
level1_Stage:

    ;        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0

; レベル 1 アニメーション
level1_Animation:

    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x2a - 0x01, 0xee, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x2a - 0x01, 0xf0, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x2a - 0x01, 0xf2, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x2a - 0x01, 0xf4, 0x13, VDP_COLOR_BLACK

; レベル 2 を作成する
;
Level2_Build:

    ; レジスタの保存

    ; ステージの作成
    ld      hl, #level2_Stage
    call    _StageBuild

    ; エネミーの作成
    ld      ix, #(_enemy + 0 * ENEMY_LENGTH)
    ld      de, #0x5720
    ld      bc, #((0x00 << 8) | 0x01)
    call    _EnemyFortSpawn
    ld      ix, #(_enemy + 1 * ENEMY_LENGTH)
    ld      de, #0x4788
    ld      bc, #((0x18 << 8) | 0x00)
    call    _EnemyGunnerSpawn
    ld      ix, #(_enemy + 2 * ENEMY_LENGTH)
    ld      de, #0x5fc0
    ld      bc, #((0x30 << 8) | 0x01)
    call    _EnemyGunnerSpawn
    
    ; プレイヤの作成
    ld      de, #0x3708
    ld      c, #0x01
    call    _PlayerSpawn
    ld      a, (_level + LEVEL_FLAG)
    bit     #LEVEL_FLAG_CONTINUE_BIT, a
    call    nz, _PlayerRestoreY

    ; アニメーションの設定
    ld      hl, #level2_Animation
    ld      (_level + LEVEL_ANIMATION_L), hl

    ; レジスタの復帰

    ; 終了
    ret

; レベル 2 を判定する
;
Level2_Check:

    ; レジスタの保存

    ; レベルの判定
    call    _PlayerIsLand
    jr      nc, 19$
;   call    _PlayerGetPosition
;   ld      a, e
    ld      a, (_player + CHARACTER_POSITION_X_H)
    cp      #0xf8
    jr      c, 19$

    ; フラグの更新
    ld      hl, #(_level + LEVEL_FLAG)
    set     #LEVEL_FLAG_CLEAR_BIT, (hl)
    set     #LEVEL_FLAG_CONTINUE_BIT, (hl)

    ; 次のレベルの設定
    ld      hl, #Level3_Build
    ld      (_level + LEVEL_BUILD_L), hl
    ld      hl, #Level3_Check
    ld      (_level + LEVEL_CHECK_L), hl
19$:

    ; レジスタの復帰

    ; 終了
    ret

; レベル 2 ステージ
level2_Stage:

    ;        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0

; レベル 2 アニメーション
level2_Animation:

    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xee, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf0, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf2, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf4, 0x13, VDP_COLOR_BLACK

; レベル 3 を作成する
;
Level3_Build:

    ; レジスタの保存

    ; ステージの作成
    ld      hl, #level3_Stage
    call    _StageBuild

    ; エネミーの作成
    ld      ix, #(_enemy + 0 * ENEMY_LENGTH)
    ld      de, #0x3fbc
    ld      c, #0x00
    call    _EnemyLegsSpawn
    
    ; プレイヤの作成
    ld      de, #0x5f08
    ld      c, #0x01
    call    _PlayerSpawn
    ld      a, (_level + LEVEL_FLAG)
    bit     #LEVEL_FLAG_CONTINUE_BIT, a
    call    nz, _PlayerRestoreY

    ; アニメーションの設定
    ld      hl, #level3_Animation
    ld      (_level + LEVEL_ANIMATION_L), hl

    ; レジスタの復帰

    ; 終了
    ret

; レベル 3 を判定する
;
Level3_Check:

    ; レジスタの保存

    ; レベルの判定
    call    _PlayerIsLand
    jr      nc, 19$
;   call    _PlayerGetPosition
;   ld      a, d
    ld      a, (_player + CHARACTER_POSITION_Y_H)
    cp      #0x68
    jr      c, 19$

    ; フラグの更新
    ld      hl, #(_level + LEVEL_FLAG)
    set     #LEVEL_FLAG_CLEAR_BIT, (hl)
    set     #LEVEL_FLAG_CONTINUE_BIT, (hl)

    ; 次のレベルの設定
    ld      hl, #Level4_Build
    ld      (_level + LEVEL_BUILD_L), hl
    ld      hl, #Level4_Check
    ld      (_level + LEVEL_CHECK_L), hl
19$:

    ; 出口を開く
    ld      a, (_level + LEVEL_ANIMATION_FRAME)
    and     #0x03
    jr      nz, 29$
    ld      hl, #(_level + LEVEL_ANIMATION_COUNT)
    ld      a, (hl)
    cp      #0x04
    jr      nc, 29$
    inc     (hl)
    ld      e, a
    ld      d, #0x00
    ld      hl, #(_stage + 0x000b * 0x0020 + 0x000e)
    add     hl, de
    ld      (hl), #STAGE_NULL
29$:

    ; レジスタの復帰

    ; 終了
    ret

; レベル 3 ステージ
level3_Stage:

    ;        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0

; レベル 3 アニメーション
level3_Animation:

    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x4e - 0x01, 0x7d, 0x11, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x50 - 0x01, 0x7d, 0x11, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0x7d, 0x11, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x54 - 0x01, 0x7d, 0x11, VDP_COLOR_BLACK

; レベル 4 を作成する
;
Level4_Build:

    ; レジスタの保存

    ; ステージの作成
    ld      hl, #level4_Stage
    call    _StageBuild

    ; エネミーの作成
    ld      ix, #(_enemy + 0 * ENEMY_LENGTH)
    ld      de, #0x17c8
    ld      bc, #((0x08 << 8) | ENEMY_AIM_0730)
    call    _EnemyTurretSpawn
    ld      ix, #(_enemy + 1 * ENEMY_LENGTH)
    ld      de, #0x1718
    ld      bc, #((0x10 << 8) | ENEMY_AIM_0430)
    call    _EnemyTurretSpawn
    ld      ix, #(_enemy + 2 * ENEMY_LENGTH)
    ld      de, #0x1740
    ld      bc, #((0x18 << 8) | ENEMY_AIM_0600)
    call    _EnemyTurretSpawn
    ld      ix, #(_enemy + 3 * ENEMY_LENGTH)
    ld      de, #0x4fe0
    ld      bc, #((0x30 << 8) | 0x00)
    call    _EnemyGunnerSpawn
;   ld      ix, #(_enemy + 4 * ENEMY_LENGTH)
;   ld      de, #0x5710
;   ld      bc, #((0x18 << 8) | 0x01)
;   call    _EnemyGunnerSpawn

    ; プレイヤの作成
    ld      de, #0x0080
    ld      c, #0x01
    call    _PlayerSpawn
    ld      a, (_level + LEVEL_FLAG)
    bit     #LEVEL_FLAG_CONTINUE_BIT, a
    call    nz, _PlayerRestoreX

    ; アニメーションの設定
    ld      hl, #level4_Animation
    ld      (_level + LEVEL_ANIMATION_L), hl

    ; レジスタの復帰

    ; 終了
    ret

; レベル 4 を判定する
;
Level4_Check:

    ; レジスタの保存

    ; レベルの判定
    call    _PlayerIsLand
    jr      nc, 19$
;   call    _PlayerGetPosition
;   ld      a, e
    ld      a, (_player + CHARACTER_POSITION_X_H)
    cp      #0x08
    jr      nc, 19$

    ; フラグの更新
    ld      hl, #(_level + LEVEL_FLAG)
    set     #LEVEL_FLAG_CLEAR_BIT, (hl)
    set     #LEVEL_FLAG_CONTINUE_BIT, (hl)

    ; 次のレベルの設定
    ld      hl, #Level5_Build
    ld      (_level + LEVEL_BUILD_L), hl
    ld      hl, #Level5_Check
    ld      (_level + LEVEL_CHECK_L), hl
19$:

    ; レジスタの復帰

    ; 終了
    ret

; レベル 4 ステージ
level4_Stage:

    ;        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0

; レベル 4 アニメーション
level4_Animation:

    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x4a - 0x01, 0x0e, 0x12, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x4a - 0x01, 0x0c, 0x12, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x4a - 0x01, 0x0a, 0x12, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x4a - 0x01, 0x08, 0x12, VDP_COLOR_BLACK

; レベル 5 を作成する
;
Level5_Build:

    ; レジスタの保存

    ; ステージの作成
    ld      hl, #level5_Stage
    call    _StageBuild

    ; エネミーの作成
    ld      ix, #(_enemy + 0 * ENEMY_LENGTH)
    ld      de, #0x17e8
    ld      bc, #((0x18 << 8) | ENEMY_AIM_0600)
    call    _EnemyTurretSpawn
    ld      ix, #(_enemy + 1 * ENEMY_LENGTH)
    ld      de, #0x1780
    ld      bc, #((0x08 << 8) | ENEMY_AIM_0430)
    call    _EnemyTurretSpawn
    ld      ix, #(_enemy + 2 * ENEMY_LENGTH)
    ld      de, #0x5710
    ld      bc, #((0x00 << 8) | 0x01)
    call    _EnemyFortSpawn
    ld      ix, #(_enemy + 3 * ENEMY_LENGTH)
    ld      de, #0x3758
    ld      bc, #((0x18 << 8) | 0x01)
    call    _EnemyGunnerSpawn
    ld      ix, #(_enemy + 4 * ENEMY_LENGTH)
    ld      de, #0x1f20
    ld      bc, #((0x30 << 8) | 0x00)
    call    _EnemyGunnerSpawn
    
    ; プレイヤの作成
    ld      de, #0x57f8
    ld      c, #0x00
    call    _PlayerSpawn
    ld      a, (_level + LEVEL_FLAG)
    bit     #LEVEL_FLAG_CONTINUE_BIT, a
    call    nz, _PlayerRestoreY

    ; アニメーションの設定
    ld      hl, #level5_Animation
    ld      (_level + LEVEL_ANIMATION_L), hl

    ; レジスタの復帰

    ; 終了
    ret

; レベル 5 を判定する
;
Level5_Check:

    ; レジスタの保存

    ; レベルの判定
    call    _PlayerIsLand
    jr      nc, 19$
;   call    _PlayerGetPosition
;   ld      a, d
    ld      a, (_player + CHARACTER_POSITION_Y_H)
    cp      #0x68
    jr      c, 19$

    ; フラグの更新
    ld      hl, #(_level + LEVEL_FLAG)
    set     #LEVEL_FLAG_CLEAR_BIT, (hl)
    set     #LEVEL_FLAG_CONTINUE_BIT, (hl)

    ; 次のレベルの設定
    ld      hl, #Level6_Build
    ld      (_level + LEVEL_BUILD_L), hl
    ld      hl, #Level6_Check
    ld      (_level + LEVEL_CHECK_L), hl
19$:

    ; 出口を開く
    ld      a, (_level + LEVEL_ANIMATION_FRAME)
    and     #0x03
    jr      nz, 29$
    ld      hl, #(_level + LEVEL_ANIMATION_COUNT)
    ld      a, (hl)
    cp      #0x04
    jr      nc, 29$
    inc     (hl)
    ld      e, a
    ld      d, #0x00
    ld      hl, #(_stage + 0x000b * 0x0020 + 0x0004)
    or      a
    sbc     hl, de
    ld      (hl), #STAGE_NULL
29$:

    ; レジスタの復帰

    ; 終了
    ret

; レベル 5 ステージ
level5_Stage:

    ;        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0

; レベル 5 アニメーション
level5_Animation:

    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x40 - 0x01, 0x15, 0x11, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x42 - 0x01, 0x15, 0x11, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x44 - 0x01, 0x15, 0x11, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x46 - 0x01, 0x15, 0x11, VDP_COLOR_BLACK

; レベル 6 を作成する
;
Level6_Build:

    ; レジスタの保存

    ; ステージの作成
    ld      hl, #level6_Stage
    call    _StageBuild

    ; エネミーの作成
    ld      ix, #(_enemy + 0 * ENEMY_LENGTH)
    ld      de, #0x3f60
    ld      bc, #((0x08 << 8) | 0x00)
    call    _EnemyHomerSpawn
    ld      ix, #(_enemy + 1 * ENEMY_LENGTH)
    ld      de, #0x47a8
    ld      bc, #((0x10 << 8) | 0x00)
    call    _EnemyHomerSpawn
    ld      ix, #(_enemy + 2 * ENEMY_LENGTH)
    ld      de, #0x5fd8
    ld      bc, #((0x18 << 8) | 0x01)
    call    _EnemyHomerSpawn
    
    ; プレイヤの作成
    ld      de, #0x0010
    ld      c, #0x00
    call    _PlayerSpawn
    ld      a, (_level + LEVEL_FLAG)
    bit     #LEVEL_FLAG_CONTINUE_BIT, a
    call    nz, _PlayerRestoreX

    ; アニメーションの設定
    ld      hl, #level6_Animation
    ld      (_level + LEVEL_ANIMATION_L), hl

    ; レジスタの復帰

    ; 終了
    ret

; レベル 6 を判定する
;
Level6_Check:

    ; レジスタの保存

    ; レベルの判定
    call    _PlayerIsLand
    jr      nc, 19$
;   call    _PlayerGetPosition
;   ld      a, e
    ld      a, (_player + CHARACTER_POSITION_X_H)
    cp      #0xf8
    jr      c, 19$

    ; フラグの更新
    ld      hl, #(_level + LEVEL_FLAG)
    set     #LEVEL_FLAG_CLEAR_BIT, (hl)
    set     #LEVEL_FLAG_CONTINUE_BIT, (hl)

    ; 次のレベルの設定
    ld      hl, #Level7_Build
    ld      (_level + LEVEL_BUILD_L), hl
    ld      hl, #Level7_Check
    ld      (_level + LEVEL_CHECK_L), hl
19$:

    ; レジスタの復帰

    ; 終了
    ret

; レベル 6 ステージ
level6_Stage:

    ;        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0

; レベル 6 アニメーション
level6_Animation:

    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xee, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf0, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf2, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf4, 0x13, VDP_COLOR_BLACK

; レベル 7 を作成する
;
Level7_Build:

    ; レジスタの保存

    ; ステージの作成
    ld      hl, #level7_Stage
    call    _StageBuild

    ; エネミーの作成
    ld      ix, #(_enemy + 0 * ENEMY_LENGTH)
    ld      de, #0x5f78
    ld      bc, #((0x10 << 8) | 0x00)
    call    _EnemyGunnerSpawn
    ld      ix, #(_enemy + 1 * ENEMY_LENGTH)
    ld      de, #0x2fe8
    ld      bc, #((0x28 << 8) | 0x00)
    call    _EnemyGunnerSpawn
    ld      ix, #(_enemy + 2 * ENEMY_LENGTH)
    ld      de, #0x0f48
    ld      bc, #((0x08 << 8) | ENEMY_AIM_1200)
    call    _EnemyTurretSpawn
    ld      ix, #(_enemy + 3 * ENEMY_LENGTH)
    ld      de, #0x57e0
    ld      bc, #((0x20 << 8) | ENEMY_AIM_0900)
    call    _EnemyTurretSpawn
    ld      ix, #(_enemy + 4 * ENEMY_LENGTH)
    ld      de, #0x0ff8
    ld      bc, #((0x00 << 8) | 0x00)
    call    _EnemyFortSpawn
    
    ; プレイヤの作成
    ld      de, #0x5f08
    ld      c, #0x01
    call    _PlayerSpawn
    ld      a, (_level + LEVEL_FLAG)
    bit     #LEVEL_FLAG_CONTINUE_BIT, a
    call    nz, _PlayerRestoreY

    ; アニメーションの設定
    ld      hl, #level7_Animation
    ld      (_level + LEVEL_ANIMATION_L), hl

    ; レジスタの復帰

    ; 終了
    ret

; レベル 7 を判定する
;
Level7_Check:

    ; レジスタの保存

    ; レベルの判定
    call    _PlayerIsLand
    jr      nc, 19$
;   call    _PlayerGetPosition
;   ld      a, e
    ld      a, (_player + CHARACTER_POSITION_X_H)
    cp      #0xf8
    jr      c, 19$
;   ld      a, d
    ld      a, (_player + CHARACTER_POSITION_Y_H)
    cp      #0x50
    jr      c, 19$

    ; フラグの更新
    ld      hl, #(_level + LEVEL_FLAG)
    set     #LEVEL_FLAG_CLEAR_BIT, (hl)
    set     #LEVEL_FLAG_CONTINUE_BIT, (hl)

    ; 次のレベルの設定
    ld      hl, #Level8_Build
    ld      (_level + LEVEL_BUILD_L), hl
    ld      hl, #Level8_Check
    ld      (_level + LEVEL_CHECK_L), hl
19$:

    ; レジスタの復帰

    ; 終了
    ret

; レベル 7 ステージ
level7_Stage:

    ;        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf1, 0xf1, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf1, 0xf1, 0xf1
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf1, 0xf1, 0xf1, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0xf1, 0xf1, 0xf1, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0xf1
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0

; レベル 7 アニメーション
level7_Animation:

    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xee, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf0, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf2, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf4, 0x13, VDP_COLOR_BLACK

; レベル 8 を作成する
;
Level8_Build:

    ; レジスタの保存

    ; ステージの作成
    ld      hl, #level8_Stage
    call    _StageBuild

    ; エネミーの作成
    ld      ix, #(_enemy + 0 * ENEMY_LENGTH)
    ld      de, #0x1750
    ld      bc, #((0x10 << 8) | ENEMY_AIM_0600)
    call    _EnemyTurretSpawn
    ld      ix, #(_enemy + 1 * ENEMY_LENGTH)
    ld      de, #0x17b0
    ld      bc, #((0x20 << 8) | ENEMY_AIM_0300)
    call    _EnemyTurretSpawn
    ld      ix, #(_enemy + 2 * ENEMY_LENGTH)
    ld      de, #0x2fe8
    ld      bc, #((0x00 << 8) | 0x00)
    call    _EnemyFortSpawn
    ld      ix, #(_enemy + 3 * ENEMY_LENGTH)
    ld      de, #0x2f18
    ld      bc, #((0x30 << 8) | 0x01)
    call    _EnemyGunnerSpawn
    ld      ix, #(_enemy + 4 * ENEMY_LENGTH)
    ld      de, #0x5fd0
    ld      bc, #((0x18 << 8) | 0x01)
    call    _EnemyHomerSpawn
    
    ; プレイヤの作成
    ld      de, #0x5f08
    ld      c, #0x01
    call    _PlayerSpawn
    ld      a, (_level + LEVEL_FLAG)
    bit     #LEVEL_FLAG_CONTINUE_BIT, a
    call    nz, _PlayerRestoreY

    ; アニメーションの設定
    ld      hl, #level8_Animation
    ld      (_level + LEVEL_ANIMATION_L), hl

    ; レジスタの復帰

    ; 終了
    ret

; レベル 8 を判定する
;
Level8_Check:

    ; レジスタの保存

    ; レベルの判定
    call    _PlayerIsLand
    jr      nc, 19$
;   call    _PlayerGetPosition
;   ld      a, e
    ld      a, (_player + CHARACTER_POSITION_X_H)
    cp      #0xf8
    jr      c, 19$

    ; フラグの更新
    ld      hl, #(_level + LEVEL_FLAG)
    set     #LEVEL_FLAG_CLEAR_BIT, (hl)
    set     #LEVEL_FLAG_CONTINUE_BIT, (hl)

    ; 次のレベルの設定
    ld      hl, #Level9_Build
    ld      (_level + LEVEL_BUILD_L), hl
    ld      hl, #Level9_Check
    ld      (_level + LEVEL_CHECK_L), hl
19$:

    ; レジスタの復帰

    ; 終了
    ret

; レベル 8 ステージ
level8_Stage:

    ;        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf1, 0xf1, 0xf1, 0xf1, 0xf1, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf1, 0xf1, 0xf1, 0xf1, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf1, 0xf1, 0xf1, 0xf1, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0

; レベル 8 アニメーション
level8_Animation:

    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xee, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf0, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf2, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf4, 0x13, VDP_COLOR_BLACK

; レベル 9 を作成する
;
Level9_Build:

    ; レジスタの保存

    ; ステージの作成
    ld      hl, #level9_Stage
    call    _StageBuild

    ; エネミーの作成
    ld      ix, #(_enemy + 0 * ENEMY_LENGTH)
    ld      de, #0x5fc4
    call    _EnemyMonsterSpawn
    
    ; プレイヤの作成
    ld      de, #0x5f08
    ld      c, #0x01
    call    _PlayerSpawn
    ld      a, (_level + LEVEL_FLAG)
    bit     #LEVEL_FLAG_CONTINUE_BIT, a
    call    nz, _PlayerRestoreY

    ; アニメーションの設定
    ld      hl, #0x0000
    ld      (_level + LEVEL_ANIMATION_L), hl

    ; レジスタの復帰

    ; 終了
    ret

; レベル 9 を判定する
;
Level9_Check:

    ; レジスタの保存

    ; エネミーの作成
    ld      ix, #(_enemy + 0 * ENEMY_LENGTH)
    ld      de, #0x7f80
    call    _EnemyFlierSpawn
    ld      ix, #(_enemy + 1 * ENEMY_LENGTH)
    ld      de, #(_enemy + 0 * ENEMY_LENGTH)
    ld      c, #0x00
    call    _EnemyHandSpawn
    ld      ix, #(_enemy + 2 * ENEMY_LENGTH)
    ld      de, #(_enemy + 0 * ENEMY_LENGTH)
    ld      c, #0x01
    call    _EnemyHandSpawn

    ; 判定の更新
    ld      hl, #Level9_Check2
    ld      (_level + LEVEL_CHECK_L), hl

    ; レジスタの復帰

    ; 終了
    ret

Level9_Check2:

    ; レジスタの保存

    ; エネミーの作成
    ld      ix, #(_enemy + 3 * ENEMY_LENGTH)
    ld      a, (_enemy + 0 * ENEMY_LENGTH + CHARACTER_POSITION_X_H)
    ld      e, a
    ld      a, (_enemy + 0 * ENEMY_LENGTH + CHARACTER_POSITION_Y_H)
    ld      d, a
    call    _EnemyHeadSpawn

    ; 判定の更新
    ld      hl, #Level9_Check3
    ld      (_level + LEVEL_CHECK_L), hl

    ; レジスタの復帰

    ; 終了
    ret

Level9_Check3:

    ; レジスタの保存

    ; レベルの判定
    call    _PlayerIsLand
    jr      nc, 19$

    ; フラグの更新
    ld      hl, #(_level + LEVEL_FLAG)
    set     #LEVEL_FLAG_CLEAR_BIT, (hl)
    set     #LEVEL_FLAG_CONTINUE_BIT, (hl)

    ; 次のレベルの設定
    ld      hl, #0x0000
    ld      (_level + LEVEL_BUILD_L), hl
    ld      (_level + LEVEL_CHECK_L), hl
19$:

    ; レジスタの復帰

    ; 終了
    ret

; レベル 9 ステージ
level9_Stage:

    ;        0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
    .db     0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0

; レベル 9 アニメーション
level9_Animation:

    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xee, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf0, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf2, 0x13, VDP_COLOR_BLACK
    .db     (APP_VIEW_Y * APP_VIEW_PIXEL) + 0x52 - 0x01, 0xf4, 0x13, VDP_COLOR_BLACK

; 定数の定義
;

; レベルの初期値
;
levelDefault:

    .db     LEVEL_FLAG_NULL
    .dw     Level1_Build ; LEVEL_BUILD_NULL
    .dw     Level1_Check ; LEVEL_CHECK_NULL
    .dw     LEVEL_ANIMATION_NULL
    .db     LEVEL_ANIMATION_NULL
    .db     LEVEL_ANIMATION_NULL


; DATA 領域
;
    .area   _DATA

; 変数の定義
;

; レベル
;
_level:

    .ds     LEVEL_LENGTH
